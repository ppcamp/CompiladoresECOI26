///////////////////////////////////////////////////////////////////////////////
// Código do usuário (antes da declaração da classe)
///////////////////////////////////////////////////////////////////////////////
// package src;

%%
///////////////////////////////////////////////////////////////////////////////
// Funções e variáveis internas da classe
///////////////////////////////////////////////////////////////////////////////
%{

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " - " + descricao);
}

%}

///////////////////////////////////////////////////////////////////////////////
// Definições do lexer/programa gerado
///////////////////////////////////////////////////////////////////////////////
%class LexicalAnalyzer
// Cria a tabela de símbolos
// %debug
// Contador de linhas,colunas,char
%line
%column
%char
// Apenas para debugar sem precisar de fazer o código principal.
%standalone
// %eof{
// %init{


///////////////////////////////////////////////////////////////////////////////
// Definições da linguagem (shortcuts for regex)
///////////////////////////////////////////////////////////////////////////////
BRANCO = [\n| |\t|\r]
ID = [_|a-z|A-Z][a-z|A-Z|0-9|_]*
SOMA = "+"
INTEIRO = 0|[1-9][0-9]*


%%
///////////////////////////////////////////////////////////////////////////////
// Regras léxicas
///////////////////////////////////////////////////////////////////////////////
"if"         { imprimir("Palavra reservada if", yytext()); }
"then"       { imprimir("Palavra reservada then", yytext()); }
{BRANCO}     { imprimir("Espaco em branco", yytext()); }
{ID}         { imprimir("Identificador", yytext()); }
{SOMA}       { imprimir("Operador de soma", yytext()); }
{INTEIRO}    { imprimir("Numero Inteiro", yytext()); }

// Para qualquer entrada não listada
. { throw new RuntimeException("Caractere inválido " + yytext()); }