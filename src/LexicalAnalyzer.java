// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexical.jflex

// Para compilar o Jflex
// jflex lexical.jflex
// javac LexicalAnalyzer.java
// java LexicalAnalyzer code_samples/



///////////////////////////////////////////////////////////////////////////////
// Código do usuário (antes da declaração da classe)
///////////////////////////////////////////////////////////////////////////////
// package src;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\4\0\1\3\2\0"+
    "\1\4\1\5\2\0\1\6\3\0\12\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\0\32\16\4\0\1\17"+
    "\1\0\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\16\1\27\2\16\1\30\1\31\1\32\1\33\1\34"+
    "\1\16\1\35\1\16\1\36\2\16\1\37\3\16\1\0"+
    "\1\40\10\0\1\2\32\0\1\1\11\0\1\41\12\0"+
    "\1\41\4\0\1\41\5\0\27\41\1\0\37\41\1\0"+
    "\u01ca\41\4\0\14\41\16\0\5\41\7\0\1\41\1\0"+
    "\1\41\21\0\165\41\1\0\2\41\2\0\4\41\1\0"+
    "\1\41\6\0\1\41\1\0\3\41\1\0\1\41\1\0"+
    "\24\41\1\0\123\41\1\0\213\41\1\0\255\41\1\0"+
    "\46\41\2\0\1\41\6\0\51\41\10\0\55\41\1\0"+
    "\1\41\1\0\2\41\1\0\2\41\1\0\1\41\10\0"+
    "\33\41\4\0\4\41\35\0\13\41\5\0\100\41\12\42"+
    "\4\0\146\41\1\0\10\41\2\0\12\41\1\0\6\41"+
    "\12\42\3\41\2\0\1\41\20\0\73\41\2\0\145\41"+
    "\16\0\12\42\54\41\4\0\1\41\2\0\1\41\2\0"+
    "\56\41\22\0\34\41\4\0\13\41\65\0\25\41\1\0"+
    "\10\41\25\0\17\41\1\0\201\41\2\0\12\42\1\0"+
    "\23\41\1\0\10\41\2\0\2\41\2\0\26\41\1\0"+
    "\7\41\1\0\1\41\3\0\4\41\2\0\11\41\2\0"+
    "\2\41\2\0\4\41\10\0\1\41\4\0\2\41\1\0"+
    "\5\41\2\0\12\42\2\41\12\0\1\41\1\0\1\41"+
    "\2\0\3\41\1\0\6\41\4\0\2\41\2\0\26\41"+
    "\1\0\7\41\1\0\2\41\1\0\2\41\1\0\2\41"+
    "\2\0\1\41\1\0\5\41\4\0\2\41\2\0\3\41"+
    "\3\0\1\41\7\0\4\41\1\0\1\41\7\0\12\42"+
    "\6\41\13\0\3\41\1\0\11\41\1\0\3\41\1\0"+
    "\26\41\1\0\7\41\1\0\2\41\1\0\5\41\2\0"+
    "\12\41\1\0\3\41\1\0\3\41\2\0\1\41\17\0"+
    "\4\41\2\0\12\42\11\0\7\41\1\0\3\41\1\0"+
    "\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0"+
    "\2\41\1\0\5\41\2\0\11\41\2\0\2\41\2\0"+
    "\3\41\10\0\2\41\4\0\2\41\1\0\5\41\2\0"+
    "\12\42\1\0\1\41\20\0\2\41\1\0\6\41\3\0"+
    "\3\41\1\0\4\41\3\0\2\41\1\0\1\41\1\0"+
    "\2\41\3\0\2\41\3\0\3\41\3\0\14\41\4\0"+
    "\5\41\3\0\3\41\1\0\4\41\2\0\1\41\6\0"+
    "\1\41\16\0\12\42\20\0\15\41\1\0\3\41\1\0"+
    "\27\41\1\0\20\41\3\0\10\41\1\0\3\41\1\0"+
    "\4\41\7\0\2\41\1\0\3\41\5\0\4\41\2\0"+
    "\12\42\20\0\4\41\1\0\10\41\1\0\3\41\1\0"+
    "\27\41\1\0\12\41\1\0\5\41\2\0\11\41\1\0"+
    "\3\41\1\0\4\41\7\0\2\41\7\0\1\41\1\0"+
    "\4\41\2\0\12\42\1\0\2\41\15\0\4\41\1\0"+
    "\10\41\1\0\3\41\1\0\63\41\1\0\3\41\1\0"+
    "\5\41\5\0\4\41\7\0\5\41\2\0\12\42\12\0"+
    "\6\41\2\0\2\41\1\0\22\41\3\0\30\41\1\0"+
    "\11\41\1\0\1\41\2\0\7\41\3\0\1\41\4\0"+
    "\6\41\1\0\1\41\1\0\10\41\6\0\12\42\2\0"+
    "\2\41\15\0\72\41\5\0\17\41\1\0\12\42\47\0"+
    "\2\41\1\0\1\41\1\0\5\41\1\0\30\41\1\0"+
    "\1\41\1\0\27\41\2\0\5\41\1\0\1\41\1\0"+
    "\6\41\2\0\12\42\2\0\4\41\40\0\1\41\27\0"+
    "\2\41\6\0\12\42\13\0\1\41\1\0\1\41\1\0"+
    "\1\41\4\0\12\41\1\0\44\41\4\0\24\41\1\0"+
    "\22\41\1\0\44\41\11\0\1\41\71\0\100\41\12\42"+
    "\6\0\100\41\12\42\4\41\2\0\46\41\1\0\1\41"+
    "\5\0\1\41\2\0\53\41\1\0\115\41\1\0\4\41"+
    "\2\0\7\41\1\0\1\41\1\0\4\41\2\0\51\41"+
    "\1\0\4\41\2\0\41\41\1\0\4\41\2\0\7\41"+
    "\1\0\1\41\1\0\4\41\2\0\17\41\1\0\71\41"+
    "\1\0\4\41\2\0\103\41\2\0\3\41\40\0\20\41"+
    "\20\0\126\41\2\0\6\41\3\0\u016c\41\2\0\21\41"+
    "\1\1\32\41\5\0\113\41\3\0\13\41\7\0\15\41"+
    "\1\0\7\41\13\0\25\41\13\0\24\41\14\0\15\41"+
    "\1\0\3\41\1\0\2\41\14\0\124\41\3\0\1\41"+
    "\4\0\2\41\2\0\12\42\41\0\3\41\2\0\12\42"+
    "\6\0\131\41\7\0\53\41\5\0\106\41\12\0\37\41"+
    "\1\0\14\41\4\0\14\41\12\0\12\42\36\41\2\0"+
    "\5\41\13\0\54\41\4\0\32\41\6\0\12\42\46\0"+
    "\34\41\4\0\77\41\1\0\35\41\2\0\1\41\12\42"+
    "\6\0\12\42\15\0\1\41\10\0\17\41\101\0\114\41"+
    "\4\0\12\42\21\0\11\41\14\0\60\41\12\42\72\41"+
    "\14\0\70\41\10\0\12\42\3\0\3\41\12\42\44\41"+
    "\2\0\11\41\7\0\53\41\2\0\3\41\20\0\3\41"+
    "\1\0\47\41\5\0\372\41\1\0\33\41\2\0\6\41"+
    "\2\0\46\41\2\0\6\41\2\0\10\41\1\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\37\41\2\0\65\41"+
    "\1\0\7\41\1\0\1\41\3\0\3\41\1\0\7\41"+
    "\3\0\4\41\2\0\6\41\4\0\15\41\5\0\3\41"+
    "\1\0\7\41\3\0\13\1\35\0\2\2\5\0\1\1"+
    "\17\0\2\41\23\0\1\41\12\0\1\1\21\0\1\41"+
    "\15\0\1\41\20\0\15\41\63\0\41\41\21\0\1\41"+
    "\4\0\1\41\2\0\12\41\1\0\1\41\3\0\5\41"+
    "\6\0\1\41\1\0\1\41\1\0\1\41\1\0\4\41"+
    "\1\0\13\41\2\0\4\41\5\0\5\41\4\0\1\41"+
    "\21\0\51\41\u022d\0\64\41\26\0\57\41\1\0\57\41"+
    "\1\0\205\41\6\0\11\41\14\0\46\41\1\0\1\41"+
    "\5\0\1\41\2\0\70\41\7\0\1\41\17\0\30\41"+
    "\11\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41"+
    "\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41"+
    "\1\0\40\41\57\0\1\41\320\0\1\1\4\0\3\41"+
    "\31\0\17\41\1\0\5\41\2\0\5\41\4\0\126\41"+
    "\2\0\2\41\2\0\3\41\1\0\132\41\1\0\4\41"+
    "\5\0\53\41\1\0\136\41\21\0\33\41\65\0\306\41"+
    "\112\0\360\41\20\0\215\41\103\0\56\41\2\0\15\41"+
    "\3\0\20\41\12\42\2\41\24\0\63\41\1\0\12\41"+
    "\1\0\163\41\45\0\11\41\2\0\147\41\2\0\65\41"+
    "\2\0\5\41\60\0\61\41\30\0\64\41\14\0\106\41"+
    "\12\0\12\42\6\0\30\41\3\0\1\41\1\0\3\41"+
    "\12\42\44\41\2\0\44\41\14\0\35\41\3\0\101\41"+
    "\16\0\1\41\12\42\6\0\20\41\12\42\5\41\1\0"+
    "\67\41\11\0\16\41\2\0\12\42\6\0\27\41\3\0"+
    "\111\41\30\0\3\41\2\0\20\41\2\0\5\41\12\0"+
    "\6\41\2\0\6\41\2\0\6\41\11\0\7\41\1\0"+
    "\7\41\1\0\53\41\1\0\14\41\10\0\173\41\1\0"+
    "\2\41\2\0\12\42\6\0\244\41\14\0\27\41\4\0"+
    "\61\41\4\0\u0100\43\156\41\2\0\152\41\46\0\7\41"+
    "\14\0\5\41\5\0\14\41\1\0\15\41\1\0\5\41"+
    "\1\0\1\41\1\0\2\41\1\0\2\41\1\0\154\41"+
    "\41\0\153\41\22\0\100\41\2\0\66\41\50\0\14\41"+
    "\4\0\20\41\20\0\20\41\3\0\2\41\30\0\3\41"+
    "\40\0\5\41\1\0\207\41\23\0\12\42\7\0\32\41"+
    "\4\0\1\41\1\0\32\41\13\0\131\41\3\0\6\41"+
    "\2\0\6\41\2\0\6\41\2\0\3\41\43\0\14\41"+
    "\1\0\32\41\1\0\23\41\1\0\2\41\1\0\17\41"+
    "\2\0\16\41\42\0\173\41\105\0\65\41\210\0\1\41"+
    "\202\0\35\41\3\0\61\41\17\0\1\41\37\0\40\41"+
    "\15\0\36\41\5\0\53\41\5\0\36\41\2\0\44\41"+
    "\4\0\10\41\1\0\5\41\52\0\236\41\2\0\12\42"+
    "\6\0\44\41\4\0\44\41\4\0\50\41\10\0\64\41"+
    "\234\0\67\41\11\0\26\41\12\0\10\41\230\0\6\41"+
    "\2\0\1\41\1\0\54\41\1\0\2\41\3\0\1\41"+
    "\2\0\27\41\12\0\27\41\11\0\37\41\101\0\23\41"+
    "\1\0\2\41\12\0\26\41\12\0\32\41\106\0\70\41"+
    "\6\0\2\41\100\0\4\41\1\0\2\41\5\0\10\41"+
    "\1\0\3\41\1\0\35\41\2\0\3\41\4\0\1\41"+
    "\40\0\35\41\3\0\35\41\43\0\10\41\1\0\36\41"+
    "\31\0\66\41\12\0\26\41\12\0\23\41\15\0\22\41"+
    "\156\0\111\41\67\0\63\41\15\0\63\41\15\0\50\41"+
    "\10\0\12\42\306\0\35\41\12\0\1\41\10\0\41\41"+
    "\217\0\27\41\11\0\107\41\37\0\12\42\17\0\74\41"+
    "\25\0\31\41\7\0\12\42\6\0\65\41\1\0\12\42"+
    "\4\0\3\41\11\0\44\41\2\0\1\41\11\0\105\41"+
    "\4\0\4\41\3\0\12\42\1\41\1\0\1\41\43\0"+
    "\22\41\1\0\45\41\6\0\1\41\101\0\7\41\1\0"+
    "\1\41\1\0\4\41\1\0\17\41\1\0\12\41\7\0"+
    "\73\41\5\0\12\42\6\0\4\41\1\0\10\41\2\0"+
    "\2\41\2\0\26\41\1\0\7\41\1\0\2\41\1\0"+
    "\5\41\1\0\12\41\2\0\2\41\2\0\3\41\2\0"+
    "\1\41\6\0\1\41\5\0\7\41\2\0\7\41\3\0"+
    "\5\41\213\0\113\41\5\0\12\42\4\0\2\41\40\0"+
    "\106\41\1\0\1\41\10\0\12\42\246\0\66\41\2\0"+
    "\11\41\27\0\6\41\42\0\101\41\3\0\1\41\13\0"+
    "\12\42\46\0\71\41\7\0\12\42\66\0\33\41\2\0"+
    "\17\41\4\0\12\42\306\0\73\41\145\0\100\41\12\42"+
    "\25\0\1\41\240\0\10\41\2\0\56\41\2\0\10\41"+
    "\1\0\2\41\33\0\77\41\10\0\1\41\10\0\112\41"+
    "\3\0\1\41\42\0\71\41\7\0\11\41\1\0\55\41"+
    "\1\0\11\41\17\0\12\42\30\0\36\41\2\0\26\41"+
    "\1\0\16\41\111\0\7\41\1\0\2\41\1\0\54\41"+
    "\3\0\1\41\1\0\2\41\1\0\11\41\10\0\12\42"+
    "\6\0\6\41\1\0\2\41\1\0\45\41\1\0\2\41"+
    "\1\0\6\41\7\0\12\42\u0136\0\27\41\11\0\232\41"+
    "\146\0\157\41\21\0\304\41\274\0\57\41\321\0\107\41"+
    "\271\0\71\41\7\0\37\41\1\0\12\42\146\0\36\41"+
    "\2\0\5\41\13\0\67\41\11\0\4\41\14\0\12\42"+
    "\11\0\25\41\5\0\23\41\260\0\100\41\200\0\113\41"+
    "\4\0\71\41\7\0\21\41\100\0\2\41\1\0\1\41"+
    "\34\0\370\41\10\0\363\41\15\0\37\41\61\0\3\41"+
    "\21\0\4\41\10\0\u018c\41\4\0\153\41\5\0\15\41"+
    "\3\0\11\41\7\0\12\41\3\0\2\41\306\0\5\41"+
    "\3\0\6\41\10\0\10\41\2\0\7\41\36\0\4\41"+
    "\224\0\3\41\273\0\125\41\1\0\107\41\1\0\2\41"+
    "\2\0\1\41\2\0\2\41\2\0\4\41\1\0\14\41"+
    "\1\0\1\41\1\0\7\41\1\0\101\41\1\0\4\41"+
    "\2\0\10\41\1\0\7\41\1\0\34\41\1\0\4\41"+
    "\1\0\5\41\1\0\1\41\3\0\7\41\1\0\u0154\41"+
    "\2\0\31\41\1\0\31\41\1\0\37\41\1\0\31\41"+
    "\1\0\37\41\1\0\31\41\1\0\37\41\1\0\31\41"+
    "\1\0\37\41\1\0\31\41\1\0\10\41\2\0\62\42"+
    "\67\41\4\0\62\41\10\0\1\41\16\0\1\41\26\0"+
    "\5\41\1\0\17\41\120\0\7\41\1\0\21\41\2\0"+
    "\7\41\1\0\2\41\1\0\5\41\325\0\55\41\3\0"+
    "\16\41\2\0\12\42\4\0\1\41\u0171\0\60\41\12\42"+
    "\6\0\305\41\13\0\7\41\51\0\114\41\4\0\12\42"+
    "\246\0\4\41\1\0\33\41\1\0\2\41\1\0\1\41"+
    "\2\0\1\41\1\0\12\41\1\0\4\41\1\0\1\41"+
    "\1\0\1\41\6\0\1\41\4\0\1\41\1\0\1\41"+
    "\1\0\1\41\1\0\3\41\1\0\2\41\1\0\1\41"+
    "\2\0\1\41\1\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\1\41\1\0\2\41\1\0\1\41\2\0\4\41"+
    "\1\0\7\41\1\0\4\41\1\0\4\41\1\0\1\41"+
    "\1\0\12\41\1\0\21\41\5\0\3\41\1\0\5\41"+
    "\1\0\21\41\164\0\32\41\6\0\32\41\6\0\32\41"+
    "\166\0\327\41\51\0\65\41\13\0\336\41\2\0\u0182\41"+
    "\16\0\u0131\41\37\0\36\41\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\12\14\1\15\1\16\1\17"+
    "\1\20\5\14\1\21\1\14\1\22\3\14\1\23\2\14"+
    "\1\24\10\14\1\25\1\14\1\26\3\14\1\27\1\0"+
    "\6\14\1\0\2\14\1\30\1\31\1\32\1\0\1\33"+
    "\1\14\2\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[75];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\44\0\110\0\44\0\44\0\44\0\154"+
    "\0\220\0\44\0\264\0\330\0\44\0\374\0\u0120\0\u0144"+
    "\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c\0\u0240\0\44"+
    "\0\44\0\44\0\44\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4"+
    "\0\374\0\u0318\0\374\0\u033c\0\u0360\0\u0384\0\374\0\u03a8"+
    "\0\u03cc\0\374\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4"+
    "\0\u04c8\0\u04ec\0\374\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0"+
    "\0\374\0\u05c4\0\u0534\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678"+
    "\0\u069c\0\u06c0\0\u06e4\0\374\0\374\0\374\0\u0708\0\u0534"+
    "\0\u072c\0\u05c4\0\u060c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[75];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\16\1\21\1\22\2\16\1\23\3\16\1\24"+
    "\1\25\1\26\1\16\1\27\1\16\1\2\1\10\1\30"+
    "\44\0\2\4\1\0\40\4\10\0\1\10\32\0\1\10"+
    "\14\0\1\31\43\0\1\32\43\0\1\33\37\0\1\16"+
    "\6\0\23\16\2\34\10\0\1\16\6\0\14\16\1\35"+
    "\6\16\2\34\10\0\1\16\6\0\6\16\1\36\14\16"+
    "\2\34\10\0\1\16\6\0\6\16\1\37\14\16\2\34"+
    "\10\0\1\16\6\0\14\16\1\40\6\16\2\34\10\0"+
    "\1\16\6\0\7\16\1\41\4\16\1\42\6\16\2\34"+
    "\10\0\1\16\6\0\17\16\1\43\3\16\2\34\10\0"+
    "\1\16\6\0\17\16\1\44\3\16\2\34\10\0\1\16"+
    "\6\0\6\16\1\45\14\16\2\34\10\0\1\16\6\0"+
    "\17\16\1\46\3\16\2\34\10\0\1\34\6\0\1\34"+
    "\1\0\20\34\1\0\2\34\10\0\1\16\6\0\5\16"+
    "\1\47\15\16\2\34\10\0\1\16\6\0\10\16\1\50"+
    "\12\16\2\34\10\0\1\16\6\0\4\16\1\51\16\16"+
    "\2\34\10\0\1\16\6\0\5\16\1\52\15\16\2\34"+
    "\10\0\1\16\6\0\20\16\1\53\2\16\2\34\10\0"+
    "\1\16\6\0\15\16\1\54\5\16\2\34\10\0\1\16"+
    "\6\0\2\16\1\55\20\16\2\34\10\0\1\16\6\0"+
    "\11\16\1\56\11\16\2\34\10\0\1\16\6\0\11\16"+
    "\1\57\11\16\2\34\10\0\1\16\6\0\12\16\1\60"+
    "\10\16\2\34\10\0\1\16\6\0\6\16\1\61\14\16"+
    "\2\34\10\0\1\16\6\0\10\16\1\62\12\16\2\34"+
    "\10\0\1\16\6\0\5\16\1\63\15\16\2\34\10\0"+
    "\1\16\6\0\20\16\1\64\2\16\2\34\10\0\1\16"+
    "\6\0\14\16\1\65\6\16\2\34\10\0\1\16\6\0"+
    "\2\16\1\66\20\16\2\34\10\0\1\16\6\0\10\16"+
    "\1\67\12\16\2\34\10\0\1\16\6\0\17\16\1\70"+
    "\3\16\2\34\10\0\1\16\6\0\6\16\1\71\14\16"+
    "\2\34\1\0\2\72\1\0\4\72\1\73\6\72\6\73"+
    "\1\74\14\73\2\75\10\0\1\16\6\0\17\16\1\76"+
    "\3\16\2\34\10\0\1\16\6\0\6\16\1\77\14\16"+
    "\2\34\10\0\1\16\6\0\2\16\1\100\20\16\2\34"+
    "\1\0\2\72\1\0\21\72\1\101\16\72\1\0\2\72"+
    "\1\0\4\72\1\73\6\72\6\73\1\74\5\73\1\102"+
    "\6\73\2\75\1\0\2\72\1\0\4\72\1\75\6\72"+
    "\1\75\1\72\4\75\1\103\13\75\1\72\2\75\10\0"+
    "\1\16\6\0\6\16\1\104\14\16\2\34\10\0\1\16"+
    "\6\0\17\16\1\105\3\16\2\34\10\0\1\16\6\0"+
    "\13\16\1\106\7\16\2\34\1\0\2\72\1\0\21\72"+
    "\1\101\5\72\1\107\10\72\1\0\2\72\1\0\4\72"+
    "\1\73\6\72\5\73\1\110\1\74\14\73\2\75\1\0"+
    "\2\72\1\0\4\72\1\75\6\72\1\75\1\72\4\75"+
    "\1\103\5\75\1\111\5\75\1\72\2\75\1\0\2\72"+
    "\1\0\20\72\1\112\1\101\16\72\1\0\2\72\1\0"+
    "\4\72\1\75\6\72\1\75\1\72\3\75\1\113\1\103"+
    "\13\75\1\72\2\75\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\2\1\1\11\2\1\1\11"+
    "\12\1\4\11\36\1\1\0\6\1\1\0\5\1\1\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[75];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + "\t- " + descricao);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Caractere invalido " + yytext());
            }
            // fall through
          case 28: break;
          case 2:
            { imprimir("ESPACO", "\\s|\\n");
            }
            // fall through
          case 29: break;
          case 3:
            { imprimir("COMENTARIO", yytext());
            }
            // fall through
          case 30: break;
          case 4:
            { imprimir("PARENTESESL", yytext());
            }
            // fall through
          case 31: break;
          case 5:
            { imprimir("PARENTESESR", yytext());
            }
            // fall through
          case 32: break;
          case 6:
            { imprimir("VIRGULA", yytext());
            }
            // fall through
          case 33: break;
          case 7:
            { imprimir("NUMERO", yytext());
            }
            // fall through
          case 34: break;
          case 8:
            { imprimir("TERNARIOELSE", yytext());
            }
            // fall through
          case 35: break;
          case 9:
            { imprimir("PONTOVIRGULA", yytext());
            }
            // fall through
          case 36: break;
          case 10:
            { imprimir("MAIOR", yytext());
            }
            // fall through
          case 37: break;
          case 11:
            { imprimir("TERNARIOIF", yytext());
            }
            // fall through
          case 38: break;
          case 12:
            { imprimir("ID", yytext());
            }
            // fall through
          case 39: break;
          case 13:
            { System.out.print(yytext());
            }
            // fall through
          case 40: break;
          case 14:
            { imprimir("IGUAL", yytext());
            }
            // fall through
          case 41: break;
          case 15:
            { imprimir("MENORIGUAL", yytext());
            }
            // fall through
          case 42: break;
          case 16:
            { imprimir("MAIORIGUAL", yytext());
            }
            // fall through
          case 43: break;
          case 17:
            { imprimir("IF", yytext());
            }
            // fall through
          case 44: break;
          case 18:
            { imprimir("OR", yytext());
            }
            // fall through
          case 45: break;
          case 19:
            { imprimir("AND", yytext());
            }
            // fall through
          case 46: break;
          case 20:
            { imprimir("END", yytext());
            }
            // fall through
          case 47: break;
          case 21:
            { imprimir("READ", yytext());
            }
            // fall through
          case 48: break;
          case 22:
            { imprimir("BEGIN", yytext());
            }
            // fall through
          case 49: break;
          case 23:
            { imprimir("WRITE", yytext());
            }
            // fall through
          case 50: break;
          case 24:
            { imprimir("VARIAVEIS", yytext());
            }
            // fall through
          case 51: break;
          case 25:
            { imprimir("INT", yytext());
            }
            // fall through
          case 52: break;
          case 26:
            { imprimir("PROGRAMA", yytext());
            }
            // fall through
          case 53: break;
          case 27:
            { imprimir("CORPO", yytext());
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicalAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicalAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
